version: '3.7'
services:
  front:
    image: node:16
    volumes:
      - ./front-end:/app
      - type: bind
        source: ./front-end.sh
        target: /app/entrypoint.sh
    working_dir: /app
    command: sh ./entrypoint.sh
    ports: 
      - 4200:4200
    environment:
      API_URL: "http://web-mkt:3000"

  web-mkt:
    image: node:16
    volumes:
      - ./mkt-node:/app
      - type: bind
        source: ./mkt-node.sh
        target: /app/entrypoint.sh
    working_dir: /app
    command: sh ./entrypoint.sh
    environment: 
      SERVER_PORT: 3000
      MONGO_URL: "mongodb://mkt-usuario:mkt-senha@mongo-mkt:27017/mkt?authSource=admin"
      RABBITMQ_HOST: 'rabbitmq'
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: guest
      RABBITMQ_PASSWORD: guest
    ports:
      - 3000:3000
    depends_on:
      rabbitmq:
        condition: service_started
      mongo-mkt:
        condition: service_healthy

  mongo-mkt:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: mkt-usuario
      MONGO_INITDB_ROOT_PASSWORD: mkt-senha
      MONGO_INITDB_DATABASE: mkt
    healthcheck: # Seção de verificação de saúde
      # O comando abaixo tenta executar um 'ping' no servidor MongoDB.
      # Ele roda dentro do contêiner mongo-mkt.
      # Sai com código 0 (sucesso) se o ping for bem-sucedido.
      test: [ "CMD", "mongosh", "--host", "localhost", "--port", "27017", "--eval", "db.adminCommand('ping')", "--quiet" ]
      interval: 10s       # Verifica a cada 10 segundos
      timeout: 5s         # Espera 5 segundos para o comando 'test' responder
      retries: 6          # Tenta 6 vezes antes de marcar como 'unhealthy'
      start_period: 60s

  rabbitmq:
    image: rabbitmq
    ports:
      - 5672:5672

  web-financeiro:
    build: ./financeiro-php
    command: sh ./entrypoint.sh
    ports:
      - 9501:9501
    volumes:
      - ./financeiro-php:/app
      - type: bind
        source: ./financeiro-php.sh
        target: /app/entrypoint.sh
    working_dir: /app
    depends_on:
      rabbitmq:
        condition: service_started

  api-gateway:
    image: nginx
    volumes:
      - ./servicos-nginx:/etc/nginx/conf.d
    restart: always
    ports:
      - 80:80
    depends_on:
      - web-academico
      - web-financeiro
      - web-mkt

  consumer-academico:
    build: ./academico-php
    volumes:
      - ./academico-php:/app
      - type: bind
        source: ./academico-php.sh
        target: /app/entrypoint.sh
    working_dir: /app
    command: sh ./entrypoint.sh
    depends_on:
      rabbitmq:
        condition: service_started
      postgre-academico:
        condition: service_healthy

    environment:
#      DB_DSN: pgsql:host=postgre-academico;dbname=academico;port=5432
#      DB_USERNAME: usuario_academico
#      DB_PASSWORD: senhapg
#      RABBITMQ_HOST: 'rabbitmq'
#      RABBITMQ_PORT: 5672
#      RABBITMQ_USERNAME: guest
#      RABBITMQ_PASSWORD: guest
#      GMAIL_USER: 'seu-email@gmail.com'
#      GMAIL_PASSWORD: 'sua-senha'
      - DB_DSN
      - DB_USERNAME
      - DB_PASSWORD
      - RABBITMQ_HOST
      - RABBITMQ_PORT
      - RABBITMQ_USERNAME
      - RABBITMQ_PASSWORD
      - GMAIL_USER
      - GMAIL_PASSWORD

  postgre-academico:
    image: postgres
    environment:
      POSTGRES_PASSWORD: senhapg
      POSTGRES_USER: usuario_academico
      POSTGRES_DB: academico
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U usuario_academico -d academico" ]
      interval: 5s
      timeout: 5s
      retries: 5

  web-academico:
    build: ./academico-php-web
    environment:
      JWT_KEY: chave-jwt
      DB_CONNECTION: pgsql
      DB_HOST: postgre-academico
      DB_DATABASE: academico
      DB_USERNAME: usuario_academico
      DB_PASSWORD: senhapg
      APP_KEY: c08cbbfd6eefc83ac6d23c4c791277e4
      APP_URL: http://web-academico:8080
      APP_ENV: local
      APP_DEBUG: "true"
    volumes:
      - ./academico-php-web/:/app
      - type: bind
        source: ./academico-php-web.sh
        target: /app/entrypoint.sh
    working_dir: /app
    command: sh ./entrypoint.sh
    ports:
      - 8080:8080
    depends_on:
      postgre-academico:
        condition: service_healthy

